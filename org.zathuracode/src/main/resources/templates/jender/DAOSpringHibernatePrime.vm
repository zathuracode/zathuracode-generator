package ${virginPackage}.dataaccess.dao;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;

import org.hibernate.Query;
import org.hibernate.criterion.Example;
import org.hibernate.SessionFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Scope;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import org.springframework.stereotype.Repository;

import javax.annotation.Resource;
import ${virginPackage}.dataaccess.api.HibernateDaoImpl;

import $package.${metaData.getRealClassName()};

#if($composedKey)
    import $package.${metaData.primaryKey.getRealClassName()};
#end

/**
 * A data access object (DAO) providing persistence and search support for
 * ${metaData.getRealClassName()} entities. Transaction control of the save(), update() and
 * delete() operations can directly support Spring container-managed
 * transactions or they can be augmented to handle user-managed Spring
 * transactions. Each of these methods provides additional information for how
 * to configure it for the desired type of transaction control.
 * 
 * @see lidis.${metaData.getRealClassName()}
 */
@Scope("singleton")
@Repository("${metaData.getRealClassName()}DAO")
public class ${metaData.getRealClassName()}DAO extends HibernateDaoImpl<${metaData.getRealClassName()}, ${metaData.getPrimaryKey().getType().getSimpleName()}> implements I${metaData.getRealClassName()}DAO {

	@Resource
    private SessionFactory sessionFactory;

	private static final Logger log = LoggerFactory.getLogger(${metaData.getRealClassName()}DAO.class);
	
	public static I${metaData.getRealClassName()}DAO getFromApplicationContext(ApplicationContext ctx) {
        return (I${metaData.getRealClassName()}DAO) ctx.getBean("${metaData.getRealClassName()}DAO");
    }  
 }