package  ${virginPackage}.presentation.backingBeans;
import java.util.ArrayList;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Set;
import java.util.TimeZone;
import java.io.Serializable;
import java.sql.*;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.calendar.*;
import org.primefaces.component.commandbutton.CommandButton;
import org.primefaces.event.RowEditEvent;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.bean.ManagedProperty;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import  ${virginPackage}.exceptions.*;
import ${package}.*;
import ${packageOriginal}.dto.${metaData.getRealClassName()}DTO;
import ${virginPackage}.presentation.businessDelegate.*;
import ${virginPackage}.utilities.*;
/**
 * @author Zathura Code Generator http://zathuracode.org/
 * www.zathuracode.org
 * 
 */
 

@ManagedBean
@ViewScoped
public class ${metaData.getRealClassName()}View implements Serializable {
	
	private static final long serialVersionUID = 1L;
	
	private static final Logger log = LoggerFactory.getLogger(${metaData.getRealClassName()}View.class);
	
public ${metaData.getRealClassName()}View() {
super();
}
#foreach($member2  in $finalParamForViewVariablesInList)
    private InputText txt${member2};
#end
#foreach($member2  in $finalParamForIdForViewVariablesInList)
    private InputText txt${member2};
#end
#if(${isFinalParamForViewDatesInList})
    #foreach($member2  in $finalParamForViewDatesInList)
        private Calendar txt${member2};
    #end
#end
#if(${isFinalParamForIdForViewDatesInList})
    #foreach($member2  in $finalParamForIdForViewDatesInList)
        private Calendar txt${member2};
    #end
#end
private CommandButton btnSave;
private CommandButton btnModify;
private CommandButton btnDelete;
private CommandButton btnClear;
private List<${metaData.getRealClassName()}DTO> data;
private ${metaData.getRealClassName()}DTO selected${metaData.getRealClassName()};
private ${metaData.getRealClassName()} entity;
private boolean showDialog;
    
@ManagedProperty(value="#{BusinessDelegatorView}")
private IBusinessDelegatorView businessDelegatorView;


	      public void rowEventListener(RowEditEvent e){
			try {
			
			${metaData.getRealClassName()}DTO ${metaData.getRealClassNameAsVariable()}DTO = (${metaData.getRealClassName()}DTO) e.getObject(); 
			
			#foreach($member2  in $finalParamForViewVariablesInList)
				#set( $str = $member2 ) 
				#set( $upper = $str.toString().substring(0,1).toUpperCase())
				#set($str2 = $str.toString().substring(1))
				if(txt${upper}${str2} == null){
					txt${upper}${str2} = new InputText ();
				}
				txt${upper}${str2}.setValue(${metaData.getRealClassNameAsVariable()}DTO.get${upper}${str2}());
				#end
			#foreach($member2  in $finalParamForIdForViewVariablesInList)
				#set( $str = $member2 ) 
				#set( $upper = $str.toString().substring(0,1).toUpperCase())
				#set($str2 = $str.toString().substring(1))
				if(txt${upper}${str2} == null){
					txt${upper}${str2} = new InputText ();
				}
				txt${upper}${str2}.setValue(${metaData.getRealClassNameAsVariable()}DTO.get${upper}${str2}());
			#end
			#if(${isFinalParamForViewDatesInList})
				#foreach($member2  in $finalParamForViewDatesInList)
				#set( $str = $member2 ) 
				#set( $upper = $str.toString().substring(0,1).toUpperCase())
				#set($str2 = $str.toString().substring(1))
				if(txt${upper}${str2} == null){
					txt${upper}${str2} = new Calendar ();
				}
				txt${upper}${str2}.setValue(${metaData.getRealClassNameAsVariable()}DTO.get${upper}${str2}());
				#end
			#end
			
			#if(${isFinalParamForIdForViewDatesInList})
				#foreach($member2  in $finalParamForIdForViewDatesInList)
				#set( $str = $member2 ) 
				#set( $upper = $str.toString().substring(0,1).toUpperCase())
				#set($str2 = $str.toString().substring(1))
				if(txt${upper}${str2} == null){
					txt${upper}${str2} = new Calendar ();
				}
				txt${upper}${str2}.setValue(${metaData.getRealClassNameAsVariable()}DTO.get${upper}${str2}());
				#end
			#end	
			
			#foreach($member2  in $finalParamForIdForViewClass)
		        $member2
		    #end
			entity = businessDelegatorView.get${metaData.getRealClassName()}(${metaData.primaryKey.getName()});
			
			action_modify();
			
			}catch (Exception ex) {
			
			}
		
		}
		
	public String action_new(){
		action_clear();
		selected${metaData.getRealClassName()} = null;
		setShowDialog(true);
		return "";
	}

	public String action_clear() {
		
		entity = null;
		selected${metaData.getRealClassName()} = null;
		
        #foreach($member2  in $finalParamForViewVariablesInList)
            if(txt${member2} != null){
			 txt${member2}.setValue(null);
             txt${member2}.setDisabled(true);
			}
        #end
        #if(${isFinalParamForViewDatesInList})
            #foreach($member2  in $finalParamForViewDatesInList)
                if(txt${member2} != null){
				  txt${member2}.setValue(null);
                  txt${member2}.setDisabled(true);
				}
            #end
        #end
        #foreach($member2  in $finalParamForIdForViewVariablesInList)
			    if(txt${member2} != null){
				   txt${member2}.setValue(null);
				   txt${member2}.setDisabled(false);	
				}
        #end
        #if(${isFinalParamForIdForViewDatesInList})
            #foreach($member2  in $finalParamForIdForViewDatesInList)
                if(txt${member2} != null){
				   txt${member2}.setValue(null);
                   txt${member2}.setDisabled(false);
				}
            #end
        #end
        if(btnSave != null){
		  btnSave.setDisabled(true);
		}
		if (btnDelete != null) {
        	btnDelete.setDisabled(true);
        }
        return "";
        }

		## evento generado para cada variable id que sea date para que actualize el growl
		#if(${isFinalParamForIdForViewDatesInList})
		 #foreach($member2  in $finalParamForIdForViewDatesInList)
		  public void listener_txt${member2}(){
			Date inputDate = (Date)txt${member2}.getValue();
			DateFormat dateFormat= new SimpleDateFormat("dd/MM/yyyy");
			FacesContext.getCurrentInstance().addMessage("", new FacesMessage("Selected Date " +dateFormat.format(inputDate)));
		  }
		 #end	
		#end
		##evento generado para cada variable  date para que actualize el growl
		#if(${isFinalParamForViewDatesInList})
			#foreach($member2  in $finalParamForViewDatesInList)
			public void listener_txt${member2}(){
			Date inputDate = (Date)txt${member2}.getValue();
			DateFormat dateFormat= new SimpleDateFormat("dd/MM/yyyy");
			FacesContext.getCurrentInstance().addMessage("", new FacesMessage("Selected Date " +dateFormat.format(inputDate)));
			}
			#end
		#end		
		
	public void listener_txtId(){
    
	    try {
	    #foreach($member2  in $finalParamForIdForViewClass)
	        $member2
	    #end
	    	entity = ${metaData.primaryKey.getName()} != null ? businessDelegatorView.get${metaData.getRealClassName()}(${metaData.primaryKey.getName()}) : null;
	    } catch (Exception e) {
	    	entity = null;
	    }
	    
		if(entity==null){
	    #foreach($member2  in $finalParamForViewVariablesInList)
	        txt${member2}.setDisabled(false);
	    #end
	    #if(${isFinalParamForViewDatesInList})
	        #foreach($member2  in $finalParamForViewDatesInList)
	            txt${member2}.setDisabled(false);
	        #end
	    #end
	    #foreach($member2  in $finalParamForIdForViewVariablesInList)
	        txt${member2}.setDisabled(false);
	    #end
	    #if(${isFinalParamForIdForViewDatesInList})
	        #foreach($member2  in $finalParamForIdForViewDatesInList)
	            txt${member2}.setDisabled(false);
	        #end
	    #end
		    btnSave.setDisabled(false);
		    }else{
		    #foreach($member2  in $finalParamForViewForSetsVariablesInList)
		        ${member2}
		    #end
		    #foreach($member2  in $finalParamForIdForViewForSetsVariablesInList)
		        ${member2}
		    #end
		    btnSave.setDisabled(false);
		    if(btnDelete!=null){
		    	btnDelete.setDisabled(false);
		    }
	    }
    }
        
	public String action_edit(ActionEvent evt){
    	
    	selected${metaData.getRealClassName()} = (${metaData.getRealClassName()}DTO)(evt.getComponent().getAttributes().get("selected${metaData.getRealClassName()}"));		
    #foreach($member2  in $finalParamForViewForSetsVariablesDtoInList)
        ${member2}
    #end
    #foreach($member2  in $finalParamForIdForViewForSetsVariablesDtoInList)
        ${member2}
    #end
        btnSave.setDisabled(false);
    	setShowDialog(true);

    	return "";
    }
    
    public String action_save(){    	
        try {        	
        	if(selected${metaData.getRealClassName()} == null && entity==null){
        		action_create();
        	}else{
        		action_modify();
        	}
        	data = null;
        } catch (Exception e) {
            FacesUtils.addErrorMessage(e.getMessage());
        }

        return "";
    	
    }
    
    public String action_create() {
        try {
        	entity = new ${metaData.getRealClassName()}();

	    #foreach($member2  in $finalParamForIdForViewClass)
	        $member2
	    #end

#if(${metaData.isGetSimpleProperties()})
    #foreach($member  in ${metaData.getSimpleProperties()})
        #if(${member.getRealClassName()}==${metaData.getPrimaryKey().getRealClassName()})
            #if(${metaData.getPrimaryKey().isPrimiaryKeyAComposeKey()})
            	entity.${member.getMethodSetterName()}(${metaData.getPrimaryKey().getName()});
            #else
            	#if(${member.getName()}==${metaData.getPrimaryKey().getName()})
            		entity.${member.getMethodSetterName()}(${metaData.getPrimaryKey().getName()});
            	#else
            		entity.${member.getMethodSetterName()}(FacesUtils.check${member.getRealClassName()}(txt${member.getGetNameOfPrimaryName()}));
            	#end
            #end           
        #else
            entity.${member.getMethodSetterName()}(FacesUtils.check${member.getRealClassName()}(txt${member.getGetNameOfPrimaryName()}));
        #end
    #end
#end
    #foreach($member2  in $finalParamForGetIdForViewClass)
        $member2
    #end
    #foreach($member2  in $finalParamForGetManyToOneForViewClass)
        $member2
    #end
    #foreach($member in ${metaData.getManyToManyProperties()})
        entity.${member.getMethodSetterName()}(FacesUtils.check${member.getRealClassName()}(txt${member.getGetNameOfPrimaryName()}));
    #end    
	        businessDelegatorView.save${metaData.getRealClassName()}(entity);
	        FacesUtils.addInfoMessage(ZMessManager.ENTITY_SUCCESFULLYSAVED);
			action_clear();
        } catch (Exception e) {
        	entity = null;
        	FacesUtils.addErrorMessage(e.getMessage());
        }
        return "";
    }
		
	public String action_modify() {
        try {
        	if(entity==null){
		    #foreach($member2  in $finalParamForGetIdByDtoForViewClass)
		        $member2
		    #end
	    		entity = businessDelegatorView.get${metaData.getRealClassName()}(${metaData.primaryKey.getName()});
    		}
    		
#if(${metaData.isGetSimpleProperties()})
    #foreach($member  in ${metaData.getSimpleProperties()})
    	#if(${member.getName()}!=${metaData.getPrimaryKey().getName()})
    		entity.${member.getMethodSetterName()}(FacesUtils.check${member.getRealClassName()}(txt${member.getGetNameOfPrimaryName()}));
    	#end         
    #end
#end
	    #foreach($member2  in $finalParamForGetManyToOneForViewClass)
	        $member2
	    #end
    #foreach($member in ${metaData.getManyToManyProperties()})
        entity.${member.getMethodSetterName()}(FacesUtils.check${member.getRealClassName()}(txt${member.getGetNameOfPrimaryName()}));
    #end    	    
	        businessDelegatorView.update${metaData.getRealClassName()}(entity);
			FacesUtils.addInfoMessage(ZMessManager.ENTITY_SUCCESFULLYMODIFIED);
        } catch (Exception e) {
		   data=null;
           FacesUtils.addErrorMessage(e.getMessage());
        }
        return "";
	}
	
	public String action_delete_datatable(ActionEvent evt){
		try{
        	selected${metaData.getRealClassName()} = (${metaData.getRealClassName()}DTO)(evt.getComponent().getAttributes().get("selected${metaData.getRealClassName()}"));
    		#foreach($member2  in $finalParamForGetIdByDtoForViewClass)
				$member2
			#end
			entity = businessDelegatorView.get${metaData.getRealClassName()}(${metaData.primaryKey.getName()});
        	action_delete();
        }catch(Exception e ){
		 FacesUtils.addErrorMessage(e.getMessage());
		}    
        return "";
    }
	
	public String action_delete_master(){
		try{
			#foreach($member2  in $finalParamForIdForViewClass)
		        $member2
		    #end
		    entity = businessDelegatorView.get${metaData.getRealClassName()}(${metaData.primaryKey.getName()});
        	action_delete();
        }catch(Exception e ){
		 FacesUtils.addErrorMessage(e.getMessage());
		}    
        return "";
    }
    
	public void action_delete() throws Exception{
		try{
			businessDelegatorView.delete${metaData.getRealClassName()}(entity);
    		FacesUtils.addInfoMessage(ZMessManager.ENTITY_SUCCESFULLYDELETED);
			action_clear();
            data= null;
		}catch(Exception e ){
			throw e;
		}  
	}	
	
    public String action_closeDialog(){
    	setShowDialog(false);
    	action_clear();    	
    	return "";
    }	
		
		
		## Action to modify DataTableEditable
		
	public String actionDeleteDataTableEditable(ActionEvent evt){
		
		try{
			selected${metaData.getRealClassName()} = (${metaData.getRealClassName()}DTO)(evt.getComponent().getAttributes().get("selected${metaData.getRealClassName()}"));		
	    #foreach($member2  in $finalParamForGetIdByDtoForViewClass)
	        $member2
	    #end
    		entity = businessDelegatorView.get${metaData.getRealClassName()}(${metaData.primaryKey.getName()});
			businessDelegatorView.delete${metaData.getRealClassName()}(entity);
			data.remove(selected${metaData.getRealClassName()});
    		FacesUtils.addInfoMessage(ZMessManager.ENTITY_SUCCESFULLYDELETED);
			action_clear();
		}catch(Exception e ){
		 FacesUtils.addErrorMessage(e.getMessage());
		}  
		
		return "";
	}
		
        public String action_modifyWitDTO(${finalParam}) throws Exception {
        try {
        
#if(${metaData.isGetSimpleProperties()})
    #foreach($member  in ${metaData.getSimpleProperties()})
    	#if(${member.getName()}!=${metaData.getPrimaryKey().getName()})
    		entity.${member.getMethodSetterName()}(FacesUtils.check${member.getRealClassName()}(${member.getName()}));
    	#end         
    #end
#end
        businessDelegatorView.update${metaData.getRealClassName()}(entity);
		FacesUtils.addInfoMessage(ZMessManager.ENTITY_SUCCESFULLYMODIFIED);
        } catch (Exception e) {
        //renderManager.getOnDemandRenderer("${metaData.getRealClassName()}View").requestRender();
        FacesUtils.addErrorMessage(e.getMessage());
        throw e;
        }
        return "";
        }
								
									
 ##}
                                         
                                            #foreach($member2  in $finalParamForViewVariablesInList)
                                                public InputText getTxt${member2}() {
                                                return txt${member2};
                                                }
                                                public void setTxt${member2}(InputText txt${member2}) {
                                                this.txt${member2} = txt${member2};
                                                }
                                            #end
                                            #if(${isFinalParamForViewDatesInList})
                                                #foreach($member2  in $finalParamForViewDatesInList)
                                                    public Calendar getTxt${member2}() {
                                                    return txt${member2};
                                                    }
                                                    public void setTxt${member2}(Calendar txt${member2}) {
                                                    this.txt${member2} = txt${member2};
                                                    }
                                                #end
                                            #end
                                            #foreach($member2  in $finalParamForIdForViewVariablesInList)
                                                public InputText getTxt${member2}() {
                                                return txt${member2};
                                                }
                                                public void setTxt${member2}(InputText txt${member2}) {
                                                this.txt${member2} = txt${member2};
                                                }
                                            #end
                                            #if(${isFinalParamForIdForViewDatesInList})
                                                #foreach($member2  in $finalParamForIdForViewDatesInList)
                                                    public Calendar getTxt${member2}() {
                                                    return txt${member2};
                                                    }
                                                    public void setTxt${member2}(Calendar txt${member2}) {
                                                    this.txt${member2} = txt${member2};
                                                    }
                                                #end
											#end
											
											## get data to DataTable and DataTableEditable
											public List<${metaData.getRealClassName()}DTO> getData() {
												try{
													if(data==null){
													data = businessDelegatorView.getData${metaData.getRealClassName()}();
													}	
												
												}catch(Exception e){
												 e.printStackTrace();
												}
												return data;
											}
											## set data to DataTable and DataTableEditable
											public void setData(List<${metaData.getRealClassName()}DTO> ${metaData.getRealClassNameAsVariable()}DTO){
												this.data=${metaData.getRealClassNameAsVariable()}DTO;
											}
											
											## get to SelectedObj to DataTableEditable
											
											public ${metaData.getRealClassName()}DTO getSelected${metaData.getRealClassName()}(){
												return selected${metaData.getRealClassName()};
											}
											
											public void setSelected${metaData.getRealClassName()} (${metaData.getRealClassName()}DTO ${metaData.getRealClassNameAsVariable()} ){
												this.selected${metaData.getRealClassName()} = ${metaData.getRealClassNameAsVariable()};
											}
											
											
                                            public CommandButton getBtnSave() {
                                            return btnSave;
                                            }
                                            public void setBtnSave(CommandButton btnSave) {
                                            this.btnSave = btnSave;
                                            }
                                            public CommandButton getBtnModify() {
                                            return btnModify;
                                            }
                                            public void setBtnModify(CommandButton btnModify) {
                                            this.btnModify = btnModify;
                                            }
                                            public CommandButton getBtnDelete() {
                                            return btnDelete;
                                            }
                                            public void setBtnDelete(CommandButton btnDelete) {
                                            this.btnDelete = btnDelete;
                                            }
                                            public CommandButton getBtnClear() {
                                            return btnClear;
                                            }
                                            public void setBtnClear(CommandButton btnClear) {
                                            this.btnClear = btnClear;
                                            }
                                            
                                            public TimeZone getTimeZone() {
                                             return java.util.TimeZone.getDefault();
                                             }
																							
											 public IBusinessDelegatorView getBusinessDelegatorView() {
											 return businessDelegatorView;
											 }

											public void setBusinessDelegatorView(IBusinessDelegatorView businessDelegatorView) {
											this.businessDelegatorView = businessDelegatorView;
											}
											
											public boolean isShowDialog() {
												return showDialog;
											}
										
											public void setShowDialog(boolean showDialog) {
												this.showDialog = showDialog;
											}											
                                             
									}
