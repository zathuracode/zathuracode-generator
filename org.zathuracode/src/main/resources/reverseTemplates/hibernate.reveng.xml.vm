<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-reverse-engineering PUBLIC "-//Hibernate/Hibernate Reverse Engineering DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-reverse-engineering-3.0.dtd" >

<hibernate-reverse-engineering>
	<type-mapping>
		#if(${makeItXml} == true)
		<sql-type jdbc-type="CHAR" hibernate-type="java.lang.String">
		</sql-type>
		<sql-type jdbc-type="VARCHAR" hibernate-type="java.lang.String">
		</sql-type>
		<sql-type jdbc-type="LONGVARCHAR" hibernate-type="java.lang.String">
		</sql-type>
		<sql-type jdbc-type="DATE" hibernate-type="java.util.Date">
		</sql-type>
		<sql-type jdbc-type="TIMESTAMP" hibernate-type="java.util.Date">
		</sql-type>
		<sql-type jdbc-type="TIME" hibernate-type="java.util.Date">
		</sql-type>		
		<sql-type jdbc-type="NUMERIC" scale="0" hibernate-type="java.lang.Long">
		</sql-type>
		<sql-type jdbc-type="NUMERIC" hibernate-type="java.lang.Double">
		</sql-type>		
		<sql-type jdbc-type="DECIMAL" scale="0" hibernate-type="java.lang.Long">
		</sql-type>
		<sql-type jdbc-type="DECIMAL" hibernate-type="java.lang.Double">
		</sql-type>			
		<sql-type jdbc-type="TINYINT" hibernate-type="java.lang.Integer">
		</sql-type>
		<sql-type jdbc-type="SMALLINT" hibernate-type="java.lang.Integer">
		</sql-type>
		<sql-type jdbc-type="INTEGER" hibernate-type="java.lang.Integer">
		</sql-type>
		<sql-type jdbc-type="BIGINT" hibernate-type="java.lang.Long">
		</sql-type>
		<sql-type jdbc-type="REAL" hibernate-type="java.lang.Float">
		</sql-type>
		<sql-type jdbc-type="FLOAT" hibernate-type="java.lang.Float">
		</sql-type>
		<sql-type jdbc-type="DOUBLE" hibernate-type="java.lang.Double">
		</sql-type>
		<sql-type jdbc-type="BOOLEAN" hibernate-type="java.lang.String">
		</sql-type>		
		<sql-type jdbc-type="BIT" hibernate-type="java.lang.String">
		</sql-type>
		<sql-type jdbc-type="OTHER" hibernate-type="java.sql.Timestamp" />
		#end
		#if(${makeItXml} == false)
		<sql-type jdbc-type="CHAR" hibernate-type="String">
		</sql-type>
		<sql-type jdbc-type="VARCHAR" hibernate-type="String">
		</sql-type>
		<sql-type jdbc-type="LONGVARCHAR" hibernate-type="String">
		</sql-type>
		<sql-type jdbc-type="DATE" hibernate-type="java.util.Date">
		</sql-type>
		<sql-type jdbc-type="TIMESTAMP" hibernate-type="java.util.Date">
		</sql-type>
		<sql-type jdbc-type="TIME" hibernate-type="java.util.Date">
		</sql-type>			
		<sql-type jdbc-type="NUMERIC" scale="0" hibernate-type="Long">
		</sql-type>
		<sql-type jdbc-type="NUMERIC" hibernate-type="Double">
		</sql-type>		
		<sql-type jdbc-type="DECIMAL" scale="0" hibernate-type="Long">
		</sql-type>
		<sql-type jdbc-type="DECIMAL" hibernate-type="Double">
		</sql-type>			
		<sql-type jdbc-type="TINYINT" hibernate-type="Integer">
		</sql-type>
		<sql-type jdbc-type="SMALLINT" hibernate-type="Integer">
		</sql-type>
		<sql-type jdbc-type="INTEGER" hibernate-type="Integer">
		</sql-type>
		<sql-type jdbc-type="BIGINT" hibernate-type="Long">
		</sql-type>
		<sql-type jdbc-type="REAL" hibernate-type="Float">
		</sql-type>
		<sql-type jdbc-type="FLOAT" hibernate-type="Float">
		</sql-type>
		<sql-type jdbc-type="DOUBLE" hibernate-type="Double">
		</sql-type>
		<sql-type jdbc-type="BOOLEAN" hibernate-type="String">
		</sql-type>
		<sql-type jdbc-type="BIT" hibernate-type="String">
		</sql-type>
		<sql-type jdbc-type="OTHER" hibernate-type="java.sql.Timestamp" />
		#end	
		
	</type-mapping>
	#if(${catalogAndSchema}=='1')
		#foreach($table  in ${tablesList})
		<table-filter match-catalog="${catalog}" match-name="$table" />
		#end
	#end
	
	#if(${catalogAndSchema}=='2')
		#foreach($table  in ${tablesList})
		<table-filter match-schema="${schema}" match-name="$table" />
		#end
	#end
	
	#if(${catalogAndSchema}=='3')
		#foreach($table  in ${tablesList})
		<table-filter match-catalog="${catalog}" match-schema="${schema}" match-name="$table" />
		#end
	#end	
</hibernate-reverse-engineering>