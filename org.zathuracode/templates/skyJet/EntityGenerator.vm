package ${virginPackage}.${modelName};

#if($oneToManyMembers.isEmpty() == false)
import java.util.ArrayList;
import java.util.List;
#end

import java.util.Date;

import javax.persistence.*;
import javax.validation.constraints.*;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
* @author Zathura Code Generator Version 9.0 http://zathuracode.org/
* www.zathuracode.org
* 
*/
@Entity
@Table ( name="${databaseName}")
@Data
@AllArgsConstructor
@NoArgsConstructor
public class ${metaData.getRealClassName()} implements java.io.Serializable {

	private static final long serialVersionUID = 1L;


	#if (${primaryKey.isPrimiaryKeyAComposeKey()})
		@EmbeddedId
	   	@AttributeOverrides( {	
		    #foreach($sim in $composeKeyAttributes)
				@AttributeOverride(name="${sim.getShowName()}", column=@Column(name="${sim.getDatabaseName()}", nullable=false) )  #if( $foreach.hasNext ) , #end 
			#end
       	  } )
		@NotNull
		private ${primaryKey.getType().getSimpleName()} ${primaryKey.getShowName()};
	#else
		@Id
	    @Column(name="${primaryKey.getDatabaseName()}", unique=true, nullable=false)
	     #if(${connectionDriverClass}=='oracle.jdbc.driver.OracleDriver')
	    	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "CALL_SEQ_${databaseName}")
			@SequenceGenerator(sequenceName = "SEQ_${databaseName}", allocationSize = 1, name = "CALL_SEQ_${databaseName}")
	    #else
	    	@GeneratedValue(strategy = GenerationType.IDENTITY)
		#end
		private ${primaryKey.getType().getSimpleName()} ${primaryKey.getShowName()};
	#end
	
	
	#foreach($mom in $manyToOneMembers)
		@ManyToOne(fetch=FetchType.LAZY)
   		@JoinColumn(name="${primaryKeyByClass.get(${mom.getType().getSimpleName().toLowerCase()}).toString()}" #if(${sim.getNullable()} == false), nullable=false #end 	#foreach($sim in $composeKeyAttributes) #if( ${primaryKeyByClass.get(${mom.getType().getSimpleName().toLowerCase()}).toString()} ==  ${sim.getDatabaseName()}) , insertable=false, updatable=false #end #end )
		@NotNull
		private ${mom.getType().getSimpleName()} ${mom.getShowName()};	
    #end
    
	#foreach($sim in $simpleMembers)
		#if(${sim.getNullable()} == false)
			@NotNull
			#if(${sim.getType().getSimpleName()} == "String")
			@NotEmpty
			@Size(max=${sim.getLength()})
			#end
		#end
		@Column(name="${sim.getDatabaseName()}"  #if(${sim.getNullable()} == false), nullable=false #end )
		private ${sim.getType().getSimpleName()} ${sim.getShowName()};	
    #end
    
	#foreach($omm in $oneToManyMembers)
	@OneToMany(fetch=FetchType.LAZY, mappedBy="${metaData.getRealClassNameAsVariable()}")
		private List<${omm.getType().getSimpleName()}> ${omm.getShowName()} = new ArrayList<>();	
    #end
    
}	