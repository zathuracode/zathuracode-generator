package ${virginPackage}.entity.controller;

import javax.validation.Valid;
import java.util.Optional;

import ${virginPackage}.mapper.${metaData.getRealClassName()}Mapper;
import ${virginPackage}.entity.service.${metaData.getRealClassName()}Service;
import ${virginPackage}.exception.VortexbirdException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import ${package}.*;
import ${virginPackage}.dto.${metaData.getRealClassName()}DTO;

import lombok.extern.slf4j.Slf4j;

/**
* @author Zathura Code Generator Version 9.0 http://zathuracode.org/
* www.zathuracode.org
* 
*/


@RestController
@RequestMapping("/api/v1/${metaData.getRealClassNameAsVariable()}")
@Slf4j
public class ${metaData.getRealClassName()}RestController {

	@Autowired
    private ${metaData.getRealClassName()}Service ${metaData.getRealClassNameAsVariable()}Service;

  	@Autowired
	private ${metaData.getRealClassName()}Mapper ${metaData.getRealClassNameAsVariable()}Mapper;

	#if (${primaryKey.isPrimiaryKeyAComposeKey()})
    	@GetMapping(value = "/#foreach($cka in $composeKeyAttributes)/{${cka.getShowName()}}#end")
    #else
    	@GetMapping(value = "/{${primaryKey.getShowName()}}")
    #end
    public ResponseEntity<?> findById(#if (${primaryKey.isPrimiaryKeyAComposeKey()}) #foreach($cka in $composeKeyAttributes) @PathVariable("${cka.getShowName()}") ${cka.getType().getSimpleName()} ${cka.getShowName()} #if($foreach.hasNext) , #end #end #else @PathVariable("${primaryKey.getShowName()}") ${primaryKey.getType().getSimpleName()} ${primaryKey.getShowName()}#end) throws VortexbirdException{
    	log.debug("Request to findById() ${metaData.getRealClassName()}");

    		#if (${primaryKey.isPrimiaryKeyAComposeKey()})

				${primaryKey.getType().getSimpleName()} ${primaryKey.getShowName()} = new ${primaryKey.getType().getSimpleName()}();

				#foreach($cka in $composeKeyAttributes)
					${primaryKey.getShowName()}.set${cka.getShowName().substring(0,1).toUpperCase()}${cka.getShowName().substring(1,${cka.getShowName().length()})}(${cka.getShowName()});
				#end

				Optional<${metaData.getRealClassName()}> optional${metaData.getRealClassName()} = documentTypeService.findById(dotyId);
				
				${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()} = optional${metaData.getRealClassName()}.isPresent()?optional${metaData.getRealClassName()}.get():null;
						
			#else
				Optional<${metaData.getRealClassName()}> optional${metaData.getRealClassName()}=${metaData.getRealClassNameAsVariable()}Service.findById(${primaryKey.getShowName()});
				
				${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()} = optional${metaData.getRealClassName()}.isPresent()?optional${metaData.getRealClassName()}.get():null;
			#end

		return ResponseEntity.ok().body(${metaData.getRealClassNameAsVariable()}Mapper.${metaData.getRealClassNameAsVariable()}To${metaData.getRealClassName()}DTO(${metaData.getRealClassNameAsVariable()}));

    }

    @GetMapping()
    public ResponseEntity<?> findAll()throws VortexbirdException{
    	log.debug("Request to findAll() ${metaData.getRealClassName()}");

		return ResponseEntity.ok().body(${metaData.getRealClassNameAsVariable()}Mapper.list${metaData.getRealClassName()}ToList${metaData.getRealClassName()}DTO(${metaData.getRealClassNameAsVariable()}Service.findAll()));

    }

    @PostMapping()
    public ResponseEntity<?> save(@Valid @RequestBody ${metaData.getRealClassName()}DTO ${metaData.getRealClassNameAsVariable()}DTO)throws VortexbirdException {
    	log.debug("Request to save ${metaData.getRealClassName()}: {}", ${metaData.getRealClassNameAsVariable()}DTO);

    		${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()} = ${metaData.getRealClassNameAsVariable()}Mapper.${metaData.getRealClassNameAsVariable()}DTOTo${metaData.getRealClassName()}(${metaData.getRealClassNameAsVariable()}DTO);
    		${metaData.getRealClassNameAsVariable()}=${metaData.getRealClassNameAsVariable()}Service.save(${metaData.getRealClassNameAsVariable()});
    		 return ResponseEntity.ok().body(${metaData.getRealClassNameAsVariable()}Mapper.${metaData.getRealClassNameAsVariable()}To${metaData.getRealClassName()}DTO(${metaData.getRealClassNameAsVariable()}));

    }

    @PutMapping()
    public ResponseEntity<?> update(@Valid @RequestBody ${metaData.getRealClassName()}DTO ${metaData.getRealClassNameAsVariable()}DTO)throws VortexbirdException {
    	log.debug("Request to update ${metaData.getRealClassName()}: {}", ${metaData.getRealClassNameAsVariable()}DTO);

    		${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()} = ${metaData.getRealClassNameAsVariable()}Mapper.${metaData.getRealClassNameAsVariable()}DTOTo${metaData.getRealClassName()}(${metaData.getRealClassNameAsVariable()}DTO);
    		${metaData.getRealClassNameAsVariable()}=${metaData.getRealClassNameAsVariable()}Service.update(${metaData.getRealClassNameAsVariable()});

    		return ResponseEntity.ok().body(${metaData.getRealClassNameAsVariable()}Mapper.${metaData.getRealClassNameAsVariable()}To${metaData.getRealClassName()}DTO(${metaData.getRealClassNameAsVariable()}));

    }

    #if (${primaryKey.isPrimiaryKeyAComposeKey()})
    	@DeleteMapping(value = "/#foreach($cka in $composeKeyAttributes)/{${cka.getShowName()}}#end")
    #else
    	@DeleteMapping(value = "/{${primaryKey.getShowName()}}")
    #end
    public ResponseEntity<?> delete(#if (${primaryKey.isPrimiaryKeyAComposeKey()}) #foreach($cka in $composeKeyAttributes) @PathVariable("${cka.getShowName()}") ${cka.getType().getSimpleName()} ${cka.getShowName()} #if($foreach.hasNext) , #end #end #else @PathVariable("${primaryKey.getShowName()}") ${primaryKey.getType().getSimpleName()} ${primaryKey.getShowName()}#end) throws VortexbirdException {
    	log.debug("Request to delete ${metaData.getRealClassName()}");


    		#if (${primaryKey.isPrimiaryKeyAComposeKey()})

				${primaryKey.getType().getSimpleName()} ${primaryKey.getShowName()} = new ${primaryKey.getType().getSimpleName()}();

				#foreach($cka in $composeKeyAttributes)
					${primaryKey.getShowName()}.set${cka.getShowName().substring(0,1).toUpperCase()}${cka.getShowName().substring(1,${cka.getShowName().length()})}(${cka.getShowName()});
				#end

				${metaData.getRealClassNameAsVariable()}Service.deleteById(${primaryKey.getShowName()});
			#else
				${metaData.getRealClassNameAsVariable()}Service.deleteById(${primaryKey.getShowName()});
			#end


    		return ResponseEntity.ok().build();

    }

    @GetMapping(value = "/count")
    public ResponseEntity<?> count(){
	 	return ResponseEntity.ok().body(${metaData.getRealClassNameAsVariable()}Service.count());
	}




}
